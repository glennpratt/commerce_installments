<?php

/**
 * @file
 * Sets up the base table for our entity and a table to store information about
 * the entity types.
 */


/**
 * Implements hook_schema().
 */
function commerce_installments_schema() {
  $schema = array();

  $schema['commerce_installments'] = array(
    'description' => 'The base table for commerce installments entities.',
    'fields' => array(
      'commerce_installments_id' => array(
        'description' => 'Primary Key: Identifier for a commerce installments.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {commerce_installments_type}.type of this commerce installments.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'language' => array(
        'description' => 'The language of the commerce installments.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'A description of the installment.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the commerce installments was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the commerce installments was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'initial_order_ref' => array(
        'description' => 'The order ID of linked to the installment.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'initial_line_item_ref' => array(
        'description' => 'The line item ID of linked to the installment.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'total_amount_due' => array(
        'description' => 'The total amount due for all installments up to this point.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'due_date' => array(
        'description' => 'A unix timestamp of the date the date / time the installment payment is due.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'paid' => array(
        'description' => 'The total amount paid',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'A reference to the customer who owns the installment',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'An installment status indicator. 0 for unpaid, 1 for paid.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
    ),
    'primary key' => array('commerce_installments_id'),
    'indexes' => array(
      'type' => array('type'),
      'uid' => array('uid'),
      'status' => array('status'),
    ),
  );

  $schema['commerce_installments_type'] = array(
    'description' => 'Stores information about defined commerce installments types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique commerce installments type identifier.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this commerce installments type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this commerce installments type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this commerce installments type in relation to others.',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this commerce installments type.',
      ),
    ) + entity_exportable_schema_fields(),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function commerce_installment_uninstall() {

}

/**
 * Implements hook_field_schema().
 *
 * Defines the database schema of the field, using the format used by the
 * Schema API.
 *
 * @see http://drupal.org/node/146939
 * @see schemaapi
 * @see hook_field_schema()
 * @ingroup field_example
 */

function commerce_installments_field_schema($field) {
  if ($field['type'] == 'commerce_installments_payment') {
    return array(
      'columns' => array (
        'due_date' => array (
          'description' => 'The Unix timestamp of the payment due date.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'amount' => array (
          'description' => 'The amount due for this payment.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
      ),
    );
  }
}
